using System;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Caching;
using DotNetCasClient.Utils;
using log4net;

namespace DotNetCasClient.State
{
    /// <summary>
    /// An ASP.NET Cache provider implementation of the ITicketManager interface.
    /// This class allows for server-side ticket management using the cache 
    /// capabilities built into ASP.NET.
    /// </summary>
    public sealed class CacheTicketManager : ITicketManager
    {
        /// <summary>
        /// Access to the log file
        /// </summary>
        private static readonly ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        /// <summary>
        /// This prefix is prepended to CAS Service Ticket as the key to the cache.
        /// </summary>
        private const string CACHE_TICKET_KEY_PREFIX = "CasTicket::";

        /// <summary>
        /// The constructor is marked internal because this object is not suitable for use 
        /// outside of this assembly.
        /// </summary>
        internal CacheTicketManager() { }

        /// <summary>
        /// Removes expired entries from the ticket store
        /// </summary>
        public void RemoveExpiredTickets()
        {
            // No-op.  ASP.NET Cache provider removes expired entries automatically.
        }

        /// <summary>
        /// Retrieve a CasAuthenticationTicket from the ticket store 
        /// by it's CAS Service Ticket
        /// </summary>
        /// <param name="serviceTicket">The service ticket generated by the CAS server</param>
        /// <returns>The CasAuthenticationTicket or null if no matching ticket is found</returns>
        /// <exception cref="ArgumentNullException">serviceTicket is null</exception>
        /// <exception cref="ArgumentException">serviceTicket is empty</exception>
        public CasAuthenticationTicket GetTicket(string serviceTicket)
        {
            if (serviceTicket == null)
            {
                throw new ArgumentNullException("serviceTicket");
            }
            if (serviceTicket.Length == 0)
            {
                throw new ArgumentException("serviceTicket is empty");
            }

            string key = GetTicketKey(serviceTicket);
            if (HttpContext.Current.Cache[key] != null)
            {
                CasAuthenticationTicket result = HttpContext.Current.Cache[key] as CasAuthenticationTicket;
                return result;
            }
            return null;
        }

        /// <summary>
        /// Inserts a CasAuthenticationTicket to the ticket store with a corresponding 
        /// ticket expiration date.
        /// </summary>
        /// <param name="casAuthenticationTicket">The CasAuthenticationTicket to insert</param>
        /// <param name="expiration">The date and time at which the ticket expires</param>
        /// <exception cref="ArgumentNullException">casAuthenticationTicket is null</exception>
        public void InsertTicket(CasAuthenticationTicket casAuthenticationTicket, DateTime expiration)
        {
            if (casAuthenticationTicket == null)
            {
                throw new ArgumentNullException("casAuthenticationTicket");
            }

            // Don't enforce sliding expiration on the cache entry.  Sliding expiration 
            // is handled by the HttpModule
            HttpContext.Current.Cache.Insert(GetTicketKey(casAuthenticationTicket), casAuthenticationTicket, null, expiration, Cache.NoSlidingExpiration);
        }

        /// <summary>
        /// Updates the expiration date & time for an existing ticket.  If the ticket does
        /// not exist in the ticket store, just return (do not throw an exception).
        /// </summary>
        /// <param name="casAuthenticationTicket">The CasAuthenticationTicket to insert</param>
        /// <param name="newExpiration">The new expiration date and time</param>
        /// <exception cref="ArgumentNullException">casAuthenticationTicket is null</exception>
        public void UpdateTicketExpiration(CasAuthenticationTicket casAuthenticationTicket, DateTime newExpiration)
        {
            if (casAuthenticationTicket == null)
            {
                throw new ArgumentNullException("casAuthenticationTicket");
            }

            RevokeTicket(casAuthenticationTicket.ServiceTicket);
            InsertTicket(casAuthenticationTicket, newExpiration);
        }

        /// <summary>
        /// Removes the ticket from the collection if it exists.  If the ticket does not
        /// exist in the ticket store, just return (do not throw an exception).
        /// </summary>
        /// <param name="serviceTicket">The ticket to remove from the ticket store</param>
        /// <exception cref="ArgumentNullException">serviceTicket is null</exception>
        /// <exception cref="ArgumentException">serviceTicket is empty</exception>
        public void RevokeTicket(string serviceTicket)
        {
            if (serviceTicket == null)
            {
                throw new ArgumentNullException("serviceTicket");
            }
            if (serviceTicket.Length == 0)
            {
                throw new ArgumentException("serviceTicket is empty");
            }

            string key = GetTicketKey(serviceTicket);
            if (HttpContext.Current.Cache[key] != null)
            {
                CasAuthenticationTicket ticket = HttpContext.Current.Cache[key] as CasAuthenticationTicket;
                if (ticket != null)
                {
                    if (HttpContext.Current.Cache[key] != null)
                    {
                        HttpContext.Current.Cache.Remove(key);
                    }
                }
            }
        }

        /// <summary>
        /// Indicates whether or not the ticket store contains the supplied serviceTicket
        /// </summary>
        /// <param name="serviceTicket">The service ticket to check for</param>
        /// <returns>True if the ticket is contained in the store</returns>
        /// <exception cref="ArgumentNullException">serviceTicket is null</exception>
        /// <exception cref="ArgumentException">serviceTicket is empty</exception>
        public bool ContainsTicket(string serviceTicket)
        {
            if (serviceTicket == null)
            {
                throw new ArgumentNullException("serviceTicket");
            }
            if (serviceTicket.Length == 0)
            {
                throw new ArgumentException("serviceTicket is empty");
            }

            IDictionaryEnumerator enumerator = HttpContext.Current.Cache.GetEnumerator();
            while (enumerator.MoveNext())
            {
                string currentKey = enumerator.Entry.Key as string;
                if (currentKey != null && currentKey.StartsWith(CACHE_TICKET_KEY_PREFIX))
                {
                    CasAuthenticationTicket currentAuthTicket = enumerator.Entry.Value as CasAuthenticationTicket;
                    if (currentAuthTicket != null)
                    {
                        if (currentAuthTicket.ServiceTicket == serviceTicket)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        /// <summary>
        /// Revoke all tickets corresponding to the supplied NetId.
        /// </summary>
        /// <param name="netId">The NetId to revoke tickets for</param>
        /// <exception cref="ArgumentNullException">The netId supplied is null</exception>
        /// <exception cref="ArgumentException">The netId supplied is empty</exception>
        public void RevokeUserTickets(string netId)
        {
            if (netId == null)
            {
                throw new ArgumentNullException("netId");
            }
            if (netId.Length == 0)
            {
                throw new ArgumentException("netId is empty");
            }

            IEnumerable<CasAuthenticationTicket> allTickets = GetAllTickets();
            foreach (CasAuthenticationTicket ticket in allTickets)
            {
                if (string.Compare(ticket.NetId, netId, true) == 0)
                {
                    RevokeTicket(ticket.ServiceTicket);
                }
            }
        }

        /// <summary>
        /// Retrieves all tickets in the ticket store that have not already expired.
        /// </summary>
        /// <returns>An enumerable collection of CasAuthenticationTickets</returns>
        public IEnumerable<CasAuthenticationTicket> GetAllTickets()
        {
            IDictionaryEnumerator enumerator = HttpContext.Current.Cache.GetEnumerator();
            while (enumerator.MoveNext())
            {
                string currentKey = enumerator.Entry.Key as string;
                if (currentKey != null && currentKey.StartsWith(CACHE_TICKET_KEY_PREFIX))
                {
                    CasAuthenticationTicket currentTicket = enumerator.Entry.Value as CasAuthenticationTicket;
                    if (currentTicket != null)
                    {
                        yield return currentTicket;
                    }
                }
            }
        }

        /// <summary>
        /// Retrieves all non-expired tickets in the ticket store associated with the 
        /// netId supplied.
        /// </summary>
        /// <param name="netId">The NetId to search the collection for</param>
        /// <returns>An enumerable collection of CasAuthenticationTickets</returns>
        /// <exception cref="ArgumentNullException">netId is null</exception>
        /// <exception cref="ArgumentException">netId is empty</exception>
        public IEnumerable<CasAuthenticationTicket> GetUserTickets(string netId)
        {
            if (netId == null)
            {
                throw new ArgumentNullException("netId");
            }
            if (netId.Length == 0)
            {
                throw new ArgumentException("netId is empty");
            }

            IDictionaryEnumerator enumerator = HttpContext.Current.Cache.GetEnumerator();
            while (enumerator.MoveNext())
            {
                string currentKey = enumerator.Entry.Key as string;
                if (currentKey != null && currentKey.StartsWith(CACHE_TICKET_KEY_PREFIX))
                {
                    CasAuthenticationTicket currentTicket = enumerator.Entry.Value as CasAuthenticationTicket;
                    if (currentTicket != null && string.Compare(currentTicket.NetId, netId, true) == 0)
                    {
                        yield return currentTicket;
                    }
                }
            }
        }

        /// <summary>
        /// Retrieves all CAS Service Tickets in the ticket store that have not already
        /// expired.
        /// </summary>
        /// <returns>An enumerable collection of service tickets</returns>
        public IEnumerable<string> GetAllServiceTickets()
        {
            IDictionaryEnumerator enumerator = HttpContext.Current.Cache.GetEnumerator();
            while (enumerator.MoveNext())
            {
                string currentKey = enumerator.Entry.Key as string;
                if (currentKey != null && currentKey.StartsWith(CACHE_TICKET_KEY_PREFIX))
                {
                    CasAuthenticationTicket currentAuthTicket = enumerator.Entry.Value as CasAuthenticationTicket;
                    if (currentAuthTicket != null)
                    {
                        yield return currentAuthTicket.ServiceTicket;
                    }
                }
            }
        }

        /// <summary>
        /// Retrieves all non-expired CAS Service Tickets in the ticket store associated 
        /// with the netId supplied.
        /// </summary>
        /// <param name="netId">The netId to search the collection for</param>
        /// <returns>An enumerable collection of service tickets</returns>
        /// <exception cref="ArgumentNullException">netId is null</exception>
        /// <exception cref="ArgumentException">netId is empty</exception>
        public IEnumerable<string> GetUserServiceTickets(string netId)
        {
            if (netId == null)
            {
                throw new ArgumentNullException("netId");
            }
            if (netId.Length == 0)
            {
                throw new ArgumentException("netId is empty");
            }

            IDictionaryEnumerator enumerator = HttpContext.Current.Cache.GetEnumerator();
            while (enumerator.MoveNext())
            {
                string currentKey = enumerator.Entry.Key as string;
                if (currentKey != null && currentKey.StartsWith(CACHE_TICKET_KEY_PREFIX))
                {
                    CasAuthenticationTicket currentAuthTicket = enumerator.Entry.Value as CasAuthenticationTicket;
                    if (currentAuthTicket != null && string.Compare(currentAuthTicket.NetId, netId, true) == 0)
                    {
                        yield return currentAuthTicket.ServiceTicket;
                    }
                }
            }
        }

        /// <summary>
        /// Retrieves a list of all users that have non-expired CAS authentication 
        /// tickets.
        /// </summary>
        /// <returns>An enumerable collection of NetId's</returns>
        public IEnumerable<string> GetAllTicketedUsers()
        {
            List<string> result = new List<string>();
            IEnumerable<CasAuthenticationTicket> tickets = GetAllTickets();
            foreach (CasAuthenticationTicket ticket in tickets)
            {
                if (!result.Contains(ticket.NetId))
                {
                    result.Add(ticket.NetId);
                }
            }
            return result.ToArray();
        }

        /// <summary>
        /// Verify that the supplied casAuthenticationTicket exists in the ticket store
        /// </summary>
        /// <param name="casAuthenticationTicket">The casAuthenticationTicket to verify</param>
        /// <returns>
        /// True if the ticket exists in the ticket store and the properties of that 
        /// ticket match the properties of the ticket in the ticket store.
        /// </returns>
        public bool VerifyClientTicket(CasAuthenticationTicket casAuthenticationTicket)
        {
            if (casAuthenticationTicket == null)
            {
                throw new ArgumentNullException("casAuthenticationTicket");
            }

            string incomingServiceTicket = casAuthenticationTicket.ServiceTicket;
            CasAuthenticationTicket cacheAuthTicket = GetTicket(incomingServiceTicket);
            if (cacheAuthTicket != null)
            {
                string cacheServiceTicket = cacheAuthTicket.ServiceTicket;
                if (cacheServiceTicket == incomingServiceTicket)
                {
                    /*
                    if (casAuthTicket.Expired)
                    {
                        if (Log.IsDebugEnabled)
                        {
                            Log.DebugFormat("{0}:Ticket [{1}] presented is already expired but did resolved to a ticket in the cache.  Removing from cache.", CommonUtils.MethodName, incomingServiceTicket);
                        }
                        RevokeTicket(incomingServiceTicket);
                        return false;
                    }

                    if (cacheAuthTicket.Expired)
                    {
                        if (Log.IsDebugEnabled)
                        {
                            Log.DebugFormat("{0}:Ticket [{1}] resolved to an expired ticket in the cache.  Removing from cache.", CommonUtils.MethodName, incomingServiceTicket);
                        }
                        RevokeTicket(incomingServiceTicket);
                        return false;
                    }
                    */

                    if (string.Compare(cacheAuthTicket.NetId, casAuthenticationTicket.NetId, true) != 0)
                    {
                        if (Log.IsDebugEnabled)
                        {
                            Log.DebugFormat("{0}:Ticket [{1}] failed username verification [{2}]", CommonUtils.MethodName, incomingServiceTicket, casAuthenticationTicket.NetId);
                        }
                        return false;
                    }

                    if (string.Compare(cacheAuthTicket.Assertion.PrincipalName, casAuthenticationTicket.Assertion.PrincipalName, true) != 0)
                    {
                        if (Log.IsDebugEnabled)
                        {
                            Log.DebugFormat("{0}:Ticket assertion failed username verification [{1}]", CommonUtils.MethodName, casAuthenticationTicket.Assertion.PrincipalName);
                        }
                        return false;
                    }

                    return true;
                }
            }
            else
            {
                if (Log.IsDebugEnabled)
                {
                    Log.DebugFormat("{0}:Ticket [{1}] not found in cache.  Never existed, expired, or removed via Single Signout", CommonUtils.MethodName, incomingServiceTicket);
                }
                return false;
            }
            return false;
        }

        /// <summary>
        /// Converts a CAS Service Ticket to its corresponding key in the
        /// ticket manager store (cache provider). 
        /// </summary>
        /// <param name="serviceTicket">
        /// The CAS Service ticket to convert.
        /// </param>
        /// <returns>
        /// The cache key associated with the corresponding 
        /// service ticket
        /// </returns>
        /// <exception cref="ArgumentNullException">serviceTicket is null</exception>
        /// <exception cref="ArgumentException">serviceTicket is empty</exception>
        private static string GetTicketKey(string serviceTicket)
        {
            if (serviceTicket == null)
            {
                throw new ArgumentNullException("serviceTicket");
            }
            if (serviceTicket.Length == 0)
            {
                throw new ArgumentException("serviceTicket is empty");
            }

            return CACHE_TICKET_KEY_PREFIX + serviceTicket;
        }

        /// <summary>
        /// Converts a CasAuthenticationTicket to its corresponding key 
        /// in the ticket manager store (cache provider). 
        /// </summary>
        /// <param name="casAuthenticationTicket">
        /// The CasAuthenticationTicket to convert.
        /// </param>
        /// <returns>
        /// The cache key associated with the corresponding 
        /// CasAuthenticationTicket
        /// </returns>
        /// <exception cref="ArgumentNullException">casAuthenticationTicket is null</exception>
        private static string GetTicketKey(CasAuthenticationTicket casAuthenticationTicket)
        {
            if (casAuthenticationTicket == null)
            {
                throw new ArgumentNullException("casAuthenticationTicket");
            }

            return CACHE_TICKET_KEY_PREFIX + casAuthenticationTicket.ServiceTicket;
        }
    }
}
