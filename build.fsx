// include Fake lib
#r @"tools/FAKE/tools/FakeLib.dll"

open System
open System.IO
open Fake
open Fake.AssemblyInfoFile

RestorePackages()

// Directories
let buildDir  = @".\build\"
let testDir   = @".\test\"
let deployDir = @".\deploy\"

// Properties
let owners = "Apereo Foundation"
let copyright = "Copyright Â© 2007-2017 Apereo.  All rights reserved."
let releaseNotes = 
    ReadFile "ReleaseNotes.md"
    |> ReleaseNotesHelper.parseReleaseNotes
let projectName = "Apereo .NET CAS Client"
let projectDir = @".\DotNetCasClient\"
let project = projectDir + "DotNetCasClient.csproj"
let buildMode = getBuildParamOrDefault "buildMode" "Release"
let nugetFeedApiKey = getBuildParamOrDefault "apiKey" ""
let nugetFeedUrl = getBuildParamOrDefault "feedUrl" ""
let publishNuGetPackages = getBuildParamOrDefault "publishNuGetPackages" "false"

// Versioning related variables
let version = releaseNotes.AssemblyVersion
let buildNumber = getBuildParamOrDefault "buildNumber" "0"
let vcsRevision = getBuildParamOrDefault "vcsRevision" "0000000000000000000000000000000000000000"
let vcsBranchNameParam = (getBuildParam "vcsBranchName")
let vcsBranchName = 
    if isNullOrWhiteSpace vcsBranchNameParam then "localDeveloperMachine"
    elif (( >** ) @"^(release/).+$" vcsBranchNameParam) then "release"
    elif (( >** ) @"^(hotfix/).+$" vcsBranchNameParam) then "hotfix"
    elif (( >** ) @"^(support/).+$" vcsBranchNameParam) then "support"
    elif (( >** ) @"^(feature/).+$" vcsBranchNameParam) then vcsBranchNameParam.Replace("/", "-")
    elif vcsBranchNameParam="develop" then "develop"
    elif vcsBranchNameParam="master" then "master"
    elif vcsBranchNameParam="default" then "default"
    else invalidArg "vcsBranchName" "An unrecognized branch name was supplied."

// Set assembly version
let assemblyVersion = version + "." + buildNumber
let semanticVersion = releaseNotes.SemVer.ToString() + "." + buildNumber + "+Branch." + vcsBranchName + ".Sha." + vcsRevision
let nugetSemanticVersion = releaseNotes.SemVer.ToString()

// Targets
Target "Trace" (fun _ ->
    trace ""
    trace ("Release Notes Version: " + version)
    trace ("Release Notes Semantic Version: " + releaseNotes.SemVer.ToString())
    trace ("Build Number: " + buildNumber)
    trace ("VCS Branch Name: " + vcsBranchName)
    trace ("VCS Revision: " + vcsRevision)
    trace ("Assembly Version: " + assemblyVersion)
    trace ("Semantic Version: " + semanticVersion)
    trace ("NuGet Package Semantic Version: " + nugetSemanticVersion)
    trace ""
)

Target "Clean" (fun _ ->
    trace " --- Cleaning directories --- "

    CleanDirs [buildDir; testDir; deployDir]
)

Target "SetAssemblyInfo" (fun _ ->
    trace " --- Setting assembly version information --- "

    CreateCSharpAssemblyInfo (projectDir @@ "\Properties\AutoGeneratedAssemblyInfo.cs")
        [Attribute.Product projectName
         Attribute.Title projectName
         Attribute.Description ".NET client for the Apereo Central Authentication Service (CAS)"
         Attribute.Company owners
         Attribute.Copyright copyright
         Attribute.Version assemblyVersion
         Attribute.FileVersion assemblyVersion
         Attribute.InformationalVersion semanticVersion] // AKA "Product Version"
)

Target "BuildAndPackageDotNetCasClient" (fun _ -> 
    trace " --- Building DotNetCasClient --- "
    
    // Properties
    let buildProperties =
        [
            "Optimize", "True"
            "DebugSymbols", "False"
            "DebugType", "None"
            "Configuration", buildMode
        ]

    // Build
    let projectBuildDir = buildDir @@ IO.Path.GetFileNameWithoutExtension(project)
    MSBuild projectBuildDir "Build" buildProperties [project]
    |> Log "AppBuild-Output: "

    trace " --- Fininshed building DotNetCasClient --- "

    trace " --- Creating NuGet package --- "

    NuGet (fun p ->
        {p with
            Title = projectName
            Version = nugetSemanticVersion
            OutputPath = deployDir
            WorkingDir = projectBuildDir
            NoPackageAnalysis = false
            Publish = Convert.ToBoolean(publishNuGetPackages)
            Copyright = copyright
            AccessKey = nugetFeedApiKey
            PublishUrl = nugetFeedUrl
            ToolPath = @".\tools\nuget\nuget.exe"
        })
        (projectDir @@ "DotNetCasClient.nuspec")

    trace " --- Finished creating NuGet package --- "
)

// Dependencies
"Clean" 
  ==> "Trace"
  ==> "SetAssemblyInfo"
  ==> "BuildAndPackageDotNetCasClient"

// start build
RunTargetOrDefault "BuildAndPackageDotNetCasClient"